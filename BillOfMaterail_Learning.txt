// COPYRIGHT Dassault Systemes 2023
//===================================================================
//
// TPACommandBOMCreation.cpp
// The state chart based command: TPACommandBOMCreation
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2023  Creation: Code generated by the CAA wizard  hp
//===================================================================
#include "TPACommandBOMCreation.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"

#include <iostream>
#include <fstream>
using namespace std;

#include "CATFrmEditor.h"
#include "CATIDftDocumentServices.h"
#include "CATIDftDrawing.h"
#include "CATIDftSheet.h"
#include "CATIDftView.h"
#include "CATIDftGenView.h"
#include "CATIDftGenGeomAccess.h"
#include "CATISpecObject.h"
#include "CATIUnknownList.h"
#include "CATDocument.h"
#include "CATIDftGenGeom.h"
#include "CATIProduct.h"
#include "CATIPrdProperties.h"
#include "CATIDrwAnnotationFactory.h"
#include "CATIDftText.h"
#include "CATIDftTextProperties.h"
#include "CATInit.h"
#include "CATIAlias.h"
#include "CATICkeParmFactory.h"
#include "CATIContainer.h"
#include "CATIDesignTable.h"

#include "CATIDocRoots.h"
#include "CATMathPoint2D.h"
#include "CATIPrtContainer.h"

//New
#include "CATICkeRelationFactory.h"
#include "CATICkeSheet.h"
#include "CATCkeGlobalFunctions.h"
#include "CATIParmPublisher.h"

//Automation API
#include "CATIADrawingView.h"
#include "CATIADrawingTable.h"
#include "CATIAProduct.h"
#include "CATIADrawingTables.h"
#include "CATIAProductDocument.h"
#include "CATIAProducts.h"
#include "CATIADrawingSheet.h"



CATCreateClass( TPACommandBOMCreation);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TPACommandBOMCreation::TPACommandBOMCreation() :
CATStateCommand ("TPACommandBOMCreation", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
//,_Indication(NULL)
{
	m_pDialogObj = NULL;
	m_pCreateAgent = NULL;
	m_pCancelAgent = NULL;
	m_pWindCloseAgent = NULL;
	m_pBOMIndicateAgent = NULL;

	m_pPosX = 0.0;
	m_pPosY = 0.0;

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TPACommandBOMCreation::~TPACommandBOMCreation()
{
	//if (_Indication != NULL) 
	//	_Indication->RequestDelayedDestruction();

	if(m_pDialogObj != NULL)
		m_pDialogObj->RequestDelayedDestruction();

	if(m_pCreateAgent != NULL)
		m_pCancelAgent->RequestDelayedDestruction();

	if(m_pCancelAgent != NULL)
		m_pCancelAgent->RequestDelayedDestruction();

	if(m_pWindCloseAgent != NULL)
		m_pWindCloseAgent->RequestDelayedDestruction();

	if(m_pBOMIndicateAgent != NULL)
		m_pBOMIndicateAgent->RequestDelayedDestruction();


	m_pDialogObj = NULL;
	m_pCreateAgent = NULL;
	m_pCancelAgent = NULL;
	m_pWindCloseAgent = NULL;
	m_pBOMIndicateAgent = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TPACommandBOMCreation::BuildGraph()
{
	m_pDialogObj = new TPADialogBOMCreation();
	m_pDialogObj->Build();
	m_pDialogObj->SetVisibility(CATDlgShow);

	//BOMCreation();
	
	// TODO: Define the StateChart 
	// ---------------------------
	//_Indication = new CATIndicationAgent ("Indication");
	//CATMathPlane PlaneXY;
	//_Indication -> SetMathPlane (PlaneXY);
	//CATDialogState * initialState = GetInitialState("initialState");
	//initialState -> AddDialogAgent (_Indication);

	//AddTransition( initialState, NULL, 
	//	IsOutputSetCondition (_Indication),
	//	Action ((ActionMethod) &TPACommandBOMCreation::ActionOne));

	m_pCreateAgent = new CATDialogAgent("CreateAgentID");
	m_pCreateAgent->AcceptOnNotify(m_pDialogObj, m_pDialogObj->GetDiaOKNotification());

	m_pCancelAgent = new CATDialogAgent("CancelAgentID");
	m_pCancelAgent->AcceptOnNotify(m_pDialogObj, m_pDialogObj->GetDiaCANCELNotification());

	m_pWindCloseAgent = new CATDialogAgent("WindCloseAgentID");
	m_pWindCloseAgent->AcceptOnNotify(m_pDialogObj, m_pDialogObj->GetWindCloseNotification());

	//IndicationAgent and States
	m_pBOMIndicateAgent = new CATIndicationAgent("BOMIndicateAgentID");

	CATDialogState * InitialState = GetInitialState("InitialStateID");
	CATDialogState * IndicationState = GetInitialState("IndicationStateID");

	IndicationState->AddDialogAgent(m_pBOMIndicateAgent);

	InitialState->AddDialogAgent(m_pCreateAgent);
	InitialState->AddDialogAgent(m_pCancelAgent);
	InitialState->AddDialogAgent(m_pWindCloseAgent);


	AddTransition( InitialState, NULL, IsOutputSetCondition (m_pCreateAgent),Action ((ActionMethod) &TPACommandBOMCreation::ActionOnCreate));
	AddTransition( InitialState, NULL, IsOutputSetCondition (m_pCancelAgent),Action ((ActionMethod) &TPACommandBOMCreation::ActionOnCancel));
	AddTransition( InitialState, NULL, IsOutputSetCondition (m_pWindCloseAgent),Action ((ActionMethod) &TPACommandBOMCreation::ActionOnCancel));

	AddTransition( IndicationState, NULL, IsOutputSetCondition (m_pBOMIndicateAgent),Action ((ActionMethod) &TPACommandBOMCreation::CreatePoint));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
//CATBoolean TPACommandBOMCreation::ActionOne( void *data )
//{
//	// TODO: Define the action associated with the transition 
//	// ------------------------------------------------------
//
//	return TRUE;
//}
//

void TPACommandBOMCreation::ActionOnCreate()
{
	m_pCreateAgent->InitializeAcquisition();
}
void TPACommandBOMCreation::ActionOnCancel()
{
	m_pCancelAgent->InitializeAcquisition();
	m_pWindCloseAgent->InitializeAcquisition();
}
void TPACommandBOMCreation::CreatePoint()
{
	
	CATMathPoint2D    mp2 = m_pBOMIndicateAgent->GetValue();
	double  x   = mp2.GetX();
	double  y   = mp2.GetY();
	m_pPosX = x;
	m_pPosY = y;

	BOMCreation(m_pPosX, m_pPosY);
	//GenerateBom(m_pPosX, m_pPosY);

}

void TPACommandBOMCreation::BOMCreation(double XCoord, double YCoord)
{
	CATTry
		HRESULT rc = E_FAIL;
	{
		CATFrmEditor *pCurrentEditor = CATFrmEditor::GetCurrentEditor();
		if(!pCurrentEditor)
			return;

		CATDocument *pCurrentDoc = pCurrentEditor->GetDocument();
		if(!pCurrentDoc)
			return;
				
		//Drafting informations Drawing APIs
		CATIDftDocumentServices *pDocSer = NULL;
		pCurrentDoc->QueryInterface(IID_CATIDftDocumentServices, (void**)&pDocSer);
		if(!pDocSer)
			return;

		CATIDftDrawing *opDftDrawing = NULL;
		pDocSer->GetDrawing(IID_CATIDftDrawing, (void**)&opDftDrawing);
		if(!opDftDrawing)
			return;

		CATIDftSheet *opDftSheet = NULL;
		opDftDrawing->GetActiveSheet(&opDftSheet);
		if(!opDftDrawing)
			return;

		CATIDftView *opDftView = NULL;
		opDftDrawing->GetActiveView(&opDftView);
		if(!opDftView)
			return;

		//Automation APIs
		CATIADrawingView *pCATIADrwView = NULL;
		opDftView->QueryInterface(IID_CATIADrawingView, (void**)&pCATIADrwView);
			if(!pCATIADrwView)
				return;

		CATIADrawingTables *pCATIADrwTables = NULL;
		pCATIADrwView->QueryInterface(IID_CATIADrawingTables, (void**)&pCATIADrwTables);
		if(!pCATIADrwTables)
			return;

		CATIADrawingTable *pCATDrwTable = NULL;
		//double X = 100.0;
		//double Y = 100.0;
		CATLONG nRow = 1;
		CATLONG nCol = 4;	
		double nRowHeight = 3.0;
		double nColWidth = 5.0;

		pCATIADrwTables->Add(m_pPosX, m_pPosY, nRow, nCol, nRowHeight, nColWidth, pCATDrwTable);
		if(!pCATDrwTable)
			return;

		pCATDrwTable->SetColumnSize(1, 20.0);
		pCATDrwTable->SetColumnSize(2, 40.0);
		pCATDrwTable->SetColumnSize(3, 80.0);
		pCATDrwTable->SetColumnSize(4, 20.0);

		CATBSTR  iTextSlNo;  
		CATUnicodeString  NewPrtSlNo = "Sl No";  
		NewPrtSlNo.ConvertToBSTR  (&iTextSlNo);
		pCATDrwTable->SetCellString(1, 1, iTextSlNo);

		CATBSTR  iTextPartNo;  
		CATUnicodeString  NewPartNb = "Part No";  
		NewPartNb.ConvertToBSTR  (&iTextPartNo);
		pCATDrwTable->SetCellString(1, 2, iTextPartNo);

		CATBSTR  iTextDescription;  
		CATUnicodeString  NewPrtDesc = "Description";  
		NewPrtDesc.ConvertToBSTR  (&iTextDescription);
		pCATDrwTable->SetCellString(1, 3, iTextDescription);

		CATBSTR  iTextQty;  
		CATUnicodeString  NewPrtQty = "Qty";  
		NewPrtQty.ConvertToBSTR  (&iTextQty);
		pCATDrwTable->SetCellString(1, 4, iTextQty);

		//Get the Product info from View
		IUnknown *piUnknown = NULL;
		opDftView->GetApplicativeExtension(IID_CATIDftGenView, &piUnknown);
		if(!piUnknown)
			return;

		CATIDftGenGeomAccess *pDftGenGeomAccess = NULL;
		piUnknown->QueryInterface(IID_CATIDftGenGeomAccess, (void**)&pDftGenGeomAccess);
		if(!pDftGenGeomAccess)
			return;

		CATIUnknownList *oListOfElets = NULL;
		pDftGenGeomAccess->GetAllGeneratedItems(IID_CATISpecObject ,&oListOfElets);
		if(!oListOfElets)
			return;

		CATListValCATUnicodeString listOfProductNames;
		CATListValCATUnicodeString listOfProductPartNo;

		unsigned int nEleCount;
		oListOfElets->Count(&nEleCount);
		if(nEleCount == 0)
			return;

		CATUnicodeString soInstanceName;
		CATUnicodeString soInstancePartNo;
	
		CATIProduct *opProductOne = NULL;
		for (int i = 0; i <= nEleCount; ++i)
		{
			IUnknown *opIUnknown = NULL;
			oListOfElets->Item( i, &opIUnknown);
			if(opIUnknown == NULL)
				continue;
			CATIDftGenGeom *pDftGenGeom = NULL;
			opIUnknown->QueryInterface(IID_CATIDftGenGeom, (void**)&pDftGenGeom);
			if(!pDftGenGeom)
				continue;

			DftGenShowMode oShowMode;
			pDftGenGeom->GetShowMode(oShowMode);
			if( (oShowMode == DftGenShowMode:: NOT_DISPLAYED) || (oShowMode == DftGenShowMode::VISIBLE))
			{
				IUnknown *opProduct = NULL;
				pDftGenGeom->GetProduct(IID_CATIProduct, &opProduct);
				if(!opProduct)
					return;
				CATIProduct *opProductOne = NULL;
				opProduct->QueryInterface(IID_CATIProduct, (void**)&opProductOne);
				if(!opProductOne)
					return;
				CATIPrdProperties_var spPrdProperties = opProductOne;
				
				opProductOne->GetPrdInstanceName(soInstanceName);

				soInstancePartNo = opProductOne->GetPartNumber();

				if(listOfProductNames.Locate(soInstanceName) > 0)
					continue;
				listOfProductNames.Append(soInstanceName);
				listOfProductPartNo.Append(soInstancePartNo);
	
				pCATDrwTable->AddRow(listOfProductNames.Size());
			}
		}
		for (int n = 1; n <= listOfProductNames.Size(); ++n)
		{
			CATBSTR  iProdSlNo;  
			CATUnicodeString  NewProdSlNo = n+1;  
			NewProdSlNo.ConvertToBSTR  (&iProdSlNo);
			pCATDrwTable->SetCellString(n, 1, iProdSlNo);

			CATBSTR  iProdPartNo;  
			CATUnicodeString  NewProdPartNo = listOfProductNames[n];  
			NewProdPartNo.ConvertToBSTR  (&iProdPartNo);
			pCATDrwTable->SetCellString(n, 2, iProdPartNo);

			CATBSTR  iProdDesc;  
			CATUnicodeString  NewProdDesc = listOfProductPartNo[n];  
			NewProdDesc.ConvertToBSTR  (&iProdDesc);
			pCATDrwTable->SetCellString(n, 3, iProdDesc);

			CATBSTR  iProdQty;  
			CATUnicodeString  NewProdQty = 1;  
			NewProdQty.ConvertToBSTR  (&iProdQty);
			pCATDrwTable->SetCellString(n, 4, iProdQty);
		}
		

		//CATIProduct *pCATIProd = NULL;
		//opDftView->QueryInterface(IID_CATIProduct, (void**)&pCATIProd);
		//if(!pCATIProd)
		//	return;

/*		
		CATIAGenerativeViewLinks *pGenViewLinks = NULL;
		pCATIADrwView->get_GenerativeLinks(pGenViewLinks);
		CATIABase *pBase = NULL;
		pGenViewLinks->FirstLink(pBase);
		CATBaseDispatch *Parent = NULL;
		pBase->get_Parent(Parent);
		CATIAProductDocument *pCATIAProdDoc = NULL;
		Parent->QueryInterface(IID_CATBaseDispatch,(void**)&pCATIAProdDoc);
		if(!pCATIAProdDoc)
			return;

		CATIAProduct *pRootProduct = NULL;
		pCATIAProdDoc->get_Product(pRootProduct);
		if(!pRootProduct)
		return;

		CATIAProducts *pProducts = NULL;
		pRootProduct->get_Products(pProducts);
		if(! pProducts)
			return;

		CATIADrawingView *pFrnView = NULL;
		CATVariant iVarName,iFrnViewName,iProductInstance;
		::BuildVariant("Isometric View",iVarName);

		map<CATUnicodeString, int> qty;
		CATLONG count =  1;
		pProducts->get_Count(count);
		int iIndex = 0;
		CATIAProduct *pProductList[4];
		for(int i = 1;i<=count;i++)
		{
			::BuildVariant((long)i,iProductInstance);
			pProducts->Item(iProductInstance,pTempProduct);
			CATBSTR _PartNum;
			pTempProduct->get_PartNumber(_PartNum);
			CATUnicodeString sPartNumber;
			sPartNumber.BuildFromBSTR(_PartNum);
			if(qty.find(sPartNumber)!=qty.end())
			{
				qty[sPartNumber] = qty[sPartNumber]+1;

			}
			else
			{
				qty.insert(pair<CATUnicodeString, int>(sPartNumber, 1));
				pProductList[iIndex] = pTempProduct;
				iIndex = iIndex+1;
			}
		}
	*/
	}
	CATCatch(CATError, pError)
	{
	}
	CATEndTry;
}

		//Producrs
/*		CATIDocRoots_var spDocRoots = pCurrentDoc;
		if(!spDocRoots)
			return;

		CATListValCATBaseUnknown_var *pDocRootProdList = spDocRoots->GiveDocRoots();
		CATIProduct_var spRootProduct = NULL_var;
		if(NULL != pDocRootProdList && pDocRootProdList->Size() > 0)
		{
			spRootProduct = (*pDocRootProdList)[1];
			delete pDocRootProdList;
			pDocRootProdList = NULL;
		}
		CATListValCATBaseUnknown_var *pAllChild = spRootProduct->GetAllChildren();
*/
//		int pAllChild->Size();

		//Get the Product info from View
	/*	IUnknown *piUnknown = NULL;
		opDftView->GetApplicativeExtension(IID_CATIDftGenView, &piUnknown);
		if(!piUnknown)
			return;

		CATIDftGenGeomAccess *pDftGenGeomAccess = NULL;
		piUnknown->QueryInterface(IID_CATIDftGenGeomAccess, (void**)&pDftGenGeomAccess);
		if(!pDftGenGeomAccess)
			return;

		CATIUnknownList *oListOfElets = NULL;
		pDftGenGeomAccess->GetAllGeneratedItems(IID_CATISpecObject ,&oListOfElets);
		if(!oListOfElets)
			return;

		CATListValCATUnicodeString listOfProductNames;

		CATIDrwAnnotationFactory_var spDrwAnoFac = opDftView;
		if(!spDrwAnoFac)
			return;

		unsigned int nEleCount;
		oListOfElets->Count(&nEleCount);
		if(nEleCount == 0)
			return;


/*		CATIDesignTable_var spDesignTableBOM = CreateDesignTable();
		if(!spDesignTableBOM)
			return;
*/
		
/*		CATIProduct *opProductOne = NULL;
		for (int i = 0; i <= nEleCount; ++i)
		{
			IUnknown *opIUnknown = NULL;
			oListOfElets->Item( i, &opIUnknown);
			if(opIUnknown == NULL)
				continue;
			CATIDftGenGeom *pDftGenGeom = NULL;
			opIUnknown->QueryInterface(IID_CATIDftGenGeom, (void**)&pDftGenGeom);
			if(!pDftGenGeom)
				continue;

			DftGenShowMode oShowMode;
			pDftGenGeom->GetShowMode(oShowMode);
			if( (oShowMode == DftGenShowMode:: NOT_DISPLAYED) || (oShowMode == DftGenShowMode::VISIBLE))
			{
				IUnknown *opProduct = NULL;
				pDftGenGeom->GetProduct(IID_CATIProduct, &opProduct);
				if(!opProduct)
					return;
				CATIProduct *opProductOne = NULL;
				opProduct->QueryInterface(IID_CATIProduct, (void**)&opProductOne);
				if(!opProductOne)
					return;
				CATIPrdProperties_var spPrdProperties = opProductOne;
				CATUnicodeString soInstanceName;
				opProductOne->GetPrdInstanceName(soInstanceName);
				if(listOfProductNames.Locate(soInstanceName) > 0)
					continue;
				listOfProductNames.Append(soInstanceName);
			}

				//CATIAProduct *pProduct = NULL;
				//opProductOne->QueryInterface(IID_CATIAProduct, (void**)&pProduct);
				//if(!pProduct)
				//	return;
	
		/*		CATIDftText *opDftText = NULL;
				const double piDftTextPos[2] = {50.0, 50.0};
				HRESULT rc = spDrwAnoFac->CreateDftText(piDftTextPos, &opDftText);
				if( SUCCEEDED (rc))
				{
					CATUnicodeString textString = soInstanceName;
					wchar_t *ptxtChar = new wchar_t[textString.GetLengthInChar() + 1];
					textString.ConvertToWChar(ptxtChar);
					opDftText->SetString(ptxtChar);
					delete [] ptxtChar;
					ptxtChar = NULL; 
					// Text properties modification: Set bold and italic
					CATIDftTextProperties *piDftTextProp = NULL;
					if (SUCCEEDED(opDftText->GetTextProperties(&piDftTextProp)))
					{
						piDftTextProp->Refresh();
						piDftTextProp->Release();
						piDftTextProp=NULL;
					}
					opDftText->Release();
					opDftText=NULL;
				}
				opProductOne->Release();
				opProductOne = NULL;
			}
			pDftGenGeom->Release();
			pDftGenGeom = NULL;
		

		CATLONG NumberOfRows = listOfProductNames.Size();

		pCATDrwTable->AddRow(NumberOfRows);
*/

/*		CATIADrawingTable *pCATDrwTable = NULL;
		double X = 100.0;
		double Y = 100.0;
		CATLONG nRow = 1;
		CATLONG nCol = 4;
		double nRowHeight = 3.0;
		double nColWidth = 5.0;

		pCATIADrwTables->Add(X, Y, nRow, nCol, nRowHeight, nColWidth, pCATDrwTable);
		if(!pCATDrwTable)
			return;
*/
		//pCATDrwTable->get_NumberOfRows(nRow);
		//pCATDrwTable->SetCellString(nRow, 1, ConvertToBSTR("Part No");
		//pCATDrwTable->SetCellString(nRow, 2, ConvertToBSTR("Description");
		//pCATDrwTable->SetCellString(nRow, 3, ConvertToBSTR("Qty ");

		//pCATDrwTable->SetColumnSize(1, 50);
		//pCATDrwTable->SetColumnSize(2, 100);
		//pCATDrwTable->SetColumnSize(3, 50);


		//indication agent
/*		CATMathPoint2D piDfttextPosition ;
		piDfttextPosition = m_pBOMIndicateAgent->GetValue();
		double X, Y;
		const double piDftPos[2] = {X, Y};
*/		

/*		CATIDrwAnnotationFactory_var spDrwAnoFac = opDftView;
		if(!spDrwAnoFac)
			return;

		CATIDftText *opDftText = NULL;
		const double piDftTextPos[2] = {50.0, 50.0};
		HRESULT rc = spDrwAnoFac->CreateDftText(piDftTextPos, &opDftText);
		if( SUCCEEDED (rc))
		{
			CATUnicodeString textString = "Bill Of Material: ";
			//CATUnicodeString textString2 = ProdName ;	
			wchar_t *ptxtChar = new wchar_t[textString.GetLengthInChar() + 1];
			textString.ConvertToWChar(ptxtChar);
			opDftText->SetString(ptxtChar);
			delete [] ptxtChar;
			ptxtChar = NULL; 
			// Text properties modification: Set bold and italic
			CATIDftTextProperties *piDftTextProp = NULL;
			if (SUCCEEDED(opDftText->GetTextProperties(&piDftTextProp)))
			{
				piDftTextProp->Refresh();
				piDftTextProp->Release();
				piDftTextProp=NULL;
			}
			opDftText->Release();
			opDftText=NULL;
		}

		//pDftGenGeomAccess->Release();
		//pDftGenGeomAccess = NULL;

		//pDocSer->Release();
		//pDocSer = NULL;
	}
	CATCatch(CATError, pError)
	{
	}
	CATEndTry;
}*/


/*
CATIDesignTable_var TPACommandBOMCreation::CreateDesignTable()
{
	CATIDesignTable_var spDesignTable = NULL_var;
	CATTry
	{
		CATFrmEditor *pCurrentEditorNew = CATFrmEditor::GetCurrentEditor();
		if(!pCurrentEditorNew)
			return spDesignTable;

		CATDocument *pCurrentDocNew = pCurrentEditorNew->GetDocument();
		if(!pCurrentDocNew)
			return spDesignTable;

		//Create Design Table
		CATInit_var spInitOnDoc = pCurrentDocNew;
		if(!spInitOnDoc)
			return spDesignTable;

		CATIContainer* piRootContainer = NULL;
		const CATIdent idCATIContainer = "CATIContainer";
		if( spInitOnDoc != NULL )
		{
			piRootContainer = (CATIContainer*) spInitOnDoc -> GetRootContainer(idCATIContainer);
			spInitOnDoc -> Release();
			spInitOnDoc = NULL;
		}

		CATICkeParmFactory_var spCkeParamFact = piRootContainer;
		if(!spCkeParamFact)
			return spDesignTable;

		CATICkeSheet_var spCkeSheet = NULL_var;
		spCkeSheet = spCkeParamFact->CreateSheet("F:\\CADCustomization\\CAAPractice\\01PartsCreatedByCode\\CreatingBOM\\ProductInfo.txt");
		if(!spCkeSheet)
			return spDesignTable;

		char file[300];
		char* path;
		strcpy(file, path);
		strcat(file, "F:\\CADCustomization\\CAAPractice\\01PartsCreatedByCode\\CreatingBOM\\ProductInfo.txt");

		spDesignTable = spCkeParamFact->CreateDesignTable("Design Table", "CreateBOM", file);
		if(!spDesignTable)
			return spDesignTable;
	
		spDesignTable->SetSheet(spCkeSheet);

	}
	CATCatch(CATError, pError)
	{
	}
	CATEndTry;
	return spDesignTable;
}*/
//void TPACommandBOMCreation::GenerateBom(double x,double y)
//{
//	CATFrmEditor *pCurrentEditor = CATFrmEditor::GetCurrentEditor();
//	if(NULL == pCurrentEditor)
//		return;
//	CATDocument *pCurrentDocument = pCurrentEditor->GetDocument();
//	if(NULL == pCurrentDocument)
//		return;
//	CATIDftDocumentServices *piDocServices = NULL;
//	pCurrentDocument->QueryInterface(IID_CATIDftDocumentServices, (void**)&piDocServices);
//	if(NULL == piDocServices)
//		return;
//	CATIDftDrawing *pDftDrawing = NULL;
//	piDocServices->GetDrawing(IID_CATIDftDrawing, (void**)&pDftDrawing);
//	if(NULL==pDftDrawing)
//		return;
//	CATIDftSheet *opActiveSheet;
//	pDftDrawing->GetActiveSheet(&opActiveSheet);
//	if(NULL == opActiveSheet)
//		return;
//	CATIADrawingSheet *pDrwSheet = NULL;
//	opActiveSheet->QueryInterface(IID_CATIADrawingSheet,(void**)&pDrwSheet);
//	if(NULL == pDrwSheet)
//		return;
//	CATIADrawingViews *pDrwViews = NULL;
//	pDrwSheet->get_Views(pDrwViews);
//	if(NULL == pDrwViews)
//		return;
//	CATIADrawingView *pDrwBckView = NULL;
//	CATIADrawingView *pFrnView = NULL;
//	CATVariant iVarName,iFrnViewName,iProductInstance;
//	::BuildVariant("Background View",iVarName);
//	::BuildVariant("Front view",iFrnViewName);
//	pDrwViews->Item(iVarName,pDrwBckView);
//	pDrwViews->Item(iFrnViewName,pFrnView);
//
//	if(NULL == pDrwBckView && NULL == pFrnView)
//		return;
//	CATIADrawingTables *pDrwTables = NULL;
//	CATIADrawingTable *pDrwTable = NULL;
//	pDrwBckView->get_Tables(pDrwTables);
//	if(pDrwTables == NULL)
//		return;
//
//	CATIAProductDocument *pProductDoc = NULL;
//	CATDocument *pCatDoc = NULL;
//	CATIAGenerativeViewLinks *pGenViewLinks = NULL;
//	pFrnView->get_GenerativeLinks(pGenViewLinks);
//	CATIABase *pBase = NULL;
//	pGenViewLinks->FirstLink(pBase);
//	CATBaseDispatch *Parent = NULL;
//	pBase->get_Parent(Parent);
//	Parent->QueryInterface(IID_CATBaseDispatch,(void**)&pProductDoc);
//
//	if(NULL == pProductDoc)
//		return;
//	CATIAProducts *pProducts = NULL;
//	CATIAProduct *pRootProduct = NULL;
//	CATIAProduct *pTempProduct = NULL;
//	pProductDoc->get_Product(pRootProduct);
//	if(NULL == pRootProduct)
//		return;
//	pRootProduct->get_Products(pProducts);
//	if(NULL == pProducts)
//		return;
//	map<CATUnicodeString, int> qty;
//	CATLONG count =  1;
//	pProducts->get_Count(count);
//	int iIndex = 0;
//	CATIAProduct *pProductList[4];
//	for(int i = 1;i<=count;i++)
//	{
//		::BuildVariant((long)i,iProductInstance);
//		pProducts->Item(iProductInstance,pTempProduct);
//		CATBSTR _PartNum;
//		pTempProduct->get_PartNumber(_PartNum);
//		CATUnicodeString sPartNumber;
//		sPartNumber.BuildFromBSTR(_PartNum);
//		if(qty.find(sPartNumber)!=qty.end())
//		{
//			qty[sPartNumber] = qty[sPartNumber]+1;
//
//		}
//		else
//		{
//			qty.insert(pair<CATUnicodeString, int>(sPartNumber, 1));
//			pProductList[iIndex] = pTempProduct;
//			iIndex = iIndex+1;
//		}
//	}
//	double x1,y1;
//	pFrnView->get_x(x1);
//	pFrnView->get_y(y1);
//	double dWidth,dHeight,xOrigin,yOrigin;
//	pDrwSheet->GetPaperWidth(dWidth);
//	pDrwSheet->GetPaperHeight(dHeight);
//	xOrigin = x+x1;//dWidth -90;
//	yOrigin = y+y1;//10;
//	CATLONG rowCnt = qty.size();
//	pDrwTables->Add(xOrigin, yOrigin, rowCnt + 1, 3, 3, 5,pDrwTable);
//	pDrwTable->put_Name(ConvertToBSTR("DrawingBOM"));
//	pDrwTable->put_AnchorPoint(CatTableTopLeft);
//
//	//Populate BOM
//	CATLONG iRow;
//	pDrwTable->get_NumberOfRows(iRow);
//	pDrwTable->SetCellString(iRow,1,ConvertToBSTR("Part Number"));
//	pDrwTable->SetCellString(iRow,2,ConvertToBSTR("Description"));
//	pDrwTable->SetCellString(iRow,3,ConvertToBSTR("Qty"));
//
//	pDrwTable->SetColumnSize(1,50);
//	pDrwTable->SetColumnSize(2,110);
//	pDrwTable->SetColumnSize(3,12);
//
//	for(int j= 0;j<iRow;j++)
//	{
//		CATBSTR partNumber,description;
//		pProductList[j]->get_PartNumber(partNumber);
//		pProductList[j]->get_Definition(description);
//		CATUnicodeString qty_PrtNumber;
//		qty_PrtNumber.BuildFromBSTR(partNumber);
//		int qty_prt =  qty[qty_PrtNumber];
//		CATUnicodeString qty_string;
//		qty_string.ConvertNumToString(qty_prt);
//		pDrwTable->SetCellString(j, 1, partNumber);
//		pDrwTable->SetCellString(j, 2, description);
//		pDrwTable->SetCellString(j, 3, ConvertToBSTR(qty_string));
//
//	}
//	qty.clear(); 		 
//}
//
//CATBSTR TPACommandBOMCreation::ConvertToBSTR(CATUnicodeString stringToConvert)
//{
//	CATBSTR string_BSTR;
//	stringToConvert.ConvertToBSTR(&string_BSTR);
//	return string_BSTR;
//}